name: Linting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Permite executar este workflow manualmente a partir da aba Actions
  workflow_dispatch:

jobs:
  lint:
    name: Run ESLint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Usar Node.js v20

      # Configurar pnpm conforme especificado no packageManager do root package.json
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8 # Especificar a versão maior do pnpm (8.0.0 no nosso caso)
          run_install: false # Não executar pnpm install automaticamente aqui

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile # Usar lockfile para instalações consistentes

      - name: Run ESLint
        # O script 'lint' no package.json raiz já executa 'turbo run lint'
        run: pnpm lint
