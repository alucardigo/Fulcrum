import { z } from 'zod';
declare const envSchema: z.ZodObject<{
    NODE_ENV: z.ZodDefault<z.ZodEnum<["development", "production", "test"]>>;
    PORT: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    API_PREFIX: z.ZodDefault<z.ZodString>;
    DATABASE_URL: z.ZodString;
    JWT_SECRET: z.ZodString;
    JWT_EXPIRES_IN: z.ZodDefault<z.ZodString>;
    JWT_REFRESH_SECRET: z.ZodString;
    JWT_REFRESH_EXPIRES_IN: z.ZodDefault<z.ZodString>;
    RATE_LIMIT_WINDOW: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    RATE_LIMIT_MAX: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    LOG_LEVEL: z.ZodDefault<z.ZodEnum<["error", "warn", "info", "debug"]>>;
    LOG_FILE_MAX_SIZE: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    LOG_MAX_FILES: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    CORS_ORIGIN: z.ZodDefault<z.ZodString>;
    SMTP_HOST: z.ZodOptional<z.ZodString>;
    SMTP_PORT: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    SMTP_USER: z.ZodOptional<z.ZodString>;
    SMTP_PASS: z.ZodOptional<z.ZodString>;
    SMTP_FROM: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    JWT_SECRET: string;
    JWT_EXPIRES_IN: string;
    DATABASE_URL: string;
    API_PREFIX: string;
    CORS_ORIGIN: string;
    PORT: number;
    NODE_ENV: "development" | "production" | "test";
    JWT_REFRESH_SECRET: string;
    JWT_REFRESH_EXPIRES_IN: string;
    RATE_LIMIT_WINDOW: number;
    RATE_LIMIT_MAX: number;
    LOG_LEVEL: "error" | "debug" | "warn" | "info";
    LOG_FILE_MAX_SIZE: number;
    LOG_MAX_FILES: number;
    SMTP_HOST?: string | undefined;
    SMTP_PORT?: number | undefined;
    SMTP_USER?: string | undefined;
    SMTP_PASS?: string | undefined;
    SMTP_FROM?: string | undefined;
}, {
    JWT_SECRET: string;
    DATABASE_URL: string;
    JWT_REFRESH_SECRET: string;
    JWT_EXPIRES_IN?: string | undefined;
    API_PREFIX?: string | undefined;
    CORS_ORIGIN?: string | undefined;
    PORT?: string | undefined;
    NODE_ENV?: "development" | "production" | "test" | undefined;
    JWT_REFRESH_EXPIRES_IN?: string | undefined;
    RATE_LIMIT_WINDOW?: string | undefined;
    RATE_LIMIT_MAX?: string | undefined;
    LOG_LEVEL?: "error" | "debug" | "warn" | "info" | undefined;
    LOG_FILE_MAX_SIZE?: string | undefined;
    LOG_MAX_FILES?: string | undefined;
    SMTP_HOST?: string | undefined;
    SMTP_PORT?: string | undefined;
    SMTP_USER?: string | undefined;
    SMTP_PASS?: string | undefined;
    SMTP_FROM?: string | undefined;
}>;
export declare const config: {
    JWT_SECRET: string;
    JWT_EXPIRES_IN: string;
    DATABASE_URL: string;
    API_PREFIX: string;
    CORS_ORIGIN: string;
    PORT: number;
    NODE_ENV: "development" | "production" | "test";
    JWT_REFRESH_SECRET: string;
    JWT_REFRESH_EXPIRES_IN: string;
    RATE_LIMIT_WINDOW: number;
    RATE_LIMIT_MAX: number;
    LOG_LEVEL: "error" | "debug" | "warn" | "info";
    LOG_FILE_MAX_SIZE: number;
    LOG_MAX_FILES: number;
    SMTP_HOST?: string | undefined;
    SMTP_PORT?: number | undefined;
    SMTP_USER?: string | undefined;
    SMTP_PASS?: string | undefined;
    SMTP_FROM?: string | undefined;
};
export type Config = z.infer<typeof envSchema>;
export {};
